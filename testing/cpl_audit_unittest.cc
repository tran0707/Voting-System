/* STUDENTS:  DO NOT EDIT THIS FILE.  INSTEAD, MODIFY YOUR OWN PROJECT
 * CODE TO FIT THE SPECIFICATION GIVEN BY THE TESTS IN THIS FILE.
 *
 * If you DO modify it, we overwrite it with a fresh version from our repo
 * when grading, so you can't use it to fudge the tests anyway.
 *
 * This file is used by the CS5801 auto-grading system.
 *
 * Please note, the assessment tests for grading, will use the same include
 * files, class names, and function names for accessing students' code that you
 * find in this file.  So students, if you write your code so that it passes
 * these feedback tests, you can be assured that the auto-grader will at least
 * be able to properly link with your code.
 */
/*******************************************************************************
* This test file are inspired by CS5801 Fall 2019
******************************************************************************/
 #ifdef CPL_AUDIT_TESTS

/*******************************************************************************
 * Includes
 ******************************************************************************/
#include <cmath>
#include <gtest/gtest.h>
#include "src/cpl.h"
#include <unistd.h>
class CPLAuditTest : public ::testing::Test {

 protected:
  virtual void SetUp() {
    // Initialize anything for TESTS
    cpl->ReadFile("cpl.csv");
    cpl1->ReadFile("cpl_random_1.csv");
    cpl2->ReadFile("cpl_random_2.csv");
  }

  CPL *cpl = new CPL();
  CPL *cpl1 = new CPL();
  CPL *cpl2 = new CPL();
  // CPL *cpl4 = new CPL();
};

/*******************************************************************************
 * Test Cases
 ******************************************************************************/

TEST_F(CPLAuditTest, AuditFile) {
  cpl->Audit();
  EXPECT_EQ(cpl->report_.GetNumTotalCandidates(), 17 ) << "FAIL";
  EXPECT_EQ(cpl->report_.GetNumBallots(), 100 ) << "FAIL";
  EXPECT_EQ(cpl->report_.GetNumTotalSeats(), 10 ) << "FAIL";
  EXPECT_EQ(cpl->report_.GetNumTotalSeats(), 10 ) << "FAIL";

  EXPECT_EQ(cpl->report_.GetWinnerParty().size(), 4 ) << "FAIL";
  EXPECT_EQ(cpl->report_.GetWinnerParty()[0].GetBallotList().size(), 30 ) << "FAIL";
  EXPECT_EQ(cpl->report_.GetWinnerParty()[1].GetBallotList().size(), 30 ) << "FAIL";
  EXPECT_EQ(cpl->report_.GetWinnerParty()[2].GetBallotList().size(), 20 ) << "FAIL";
  EXPECT_EQ(cpl->report_.GetWinnerParty()[3].GetBallotList().size(), 20 ) << "FAIL";

  EXPECT_EQ(cpl->report_.GetWinnerParty()[0].list_candidates_.size(), 3 ) << "FAIL";
  EXPECT_EQ(cpl->report_.GetWinnerParty()[1].list_candidates_.size(), 3 ) << "FAIL";
  EXPECT_EQ(cpl->report_.GetWinnerParty()[2].list_candidates_.size(), 2 ) << "FAIL";
  EXPECT_EQ(cpl->report_.GetWinnerParty()[3].list_candidates_.size(), 2 ) << "FAIL";

  EXPECT_EQ(cpl->report_.GetWinnerParty()[0].list_candidates_[0].GetName(), "Pike" ) << "FAIL";
  EXPECT_EQ(cpl->report_.GetWinnerParty()[1].list_candidates_[0].GetName(), "Deutsch" ) << "FAIL";
  EXPECT_EQ(cpl->report_.GetWinnerParty()[2].list_candidates_[0].GetName(), "Jones" ) << "FAIL";
  EXPECT_EQ(cpl->report_.GetWinnerParty()[3].list_candidates_[0].GetName(), "Perez" ) << "FAIL";

  // Testing 2 parties' sum of winner candidates (cpl.csv)
  EXPECT_EQ(static_cast<int> (cpl->report_.GetWinnerParty()[2].list_candidates_.size()
    + cpl->report_.GetWinnerParty()[3].list_candidates_.size()), 4 ) << "FAIL";
  /* There should be more for checking party and candidates.
  * However, at this point, report are incomplete
  * Still wait for the report to fully check other values.
  **/

  cpl1->Audit();
  EXPECT_EQ(cpl1->report_.GetNumTotalCandidates(), 17 ) << "FAIL";
  EXPECT_EQ(cpl1->report_.GetNumBallots(), 100 ) << "FAIL: CPLReadFileTest:ReadFile - NumBallots is incorrect";
  EXPECT_EQ(cpl1->report_.GetNumTotalSeats(), 10 ) << "FAIL";
  EXPECT_EQ(cpl1->report_.GetNumTotalSeats(), 10 ) << "FAIL";

  EXPECT_EQ(cpl1->report_.GetWinnerParty().size(), 4 ) << "FAIL";
  EXPECT_EQ(cpl1->report_.GetWinnerParty()[0].GetBallotList().size(), 28 ) << "FAIL";
  EXPECT_EQ(cpl1->report_.GetWinnerParty()[1].GetBallotList().size(), 28 ) << "FAIL";
  EXPECT_EQ(cpl1->report_.GetWinnerParty()[2].GetBallotList().size(), 24 ) << "FAIL";
  EXPECT_EQ(cpl1->report_.GetWinnerParty()[3].GetBallotList().size(), 20 ) << "FAIL";

  EXPECT_EQ(cpl1->report_.GetWinnerParty()[0].list_candidates_.size(), 3 ) << "FAIL";
  EXPECT_EQ(cpl1->report_.GetWinnerParty()[1].list_candidates_.size(), 3 ) << "FAIL";
  EXPECT_EQ(cpl1->report_.GetWinnerParty()[2].list_candidates_.size(), 2 ) << "FAIL";
  EXPECT_EQ(cpl1->report_.GetWinnerParty()[3].list_candidates_.size(), 2 ) << "FAIL";

  /* There should be more for checking party and candidates.
  * However, at this point, report are incomplete
  * Still wait for the report to fully check other values.
  **/

  cpl2->Audit();
  EXPECT_EQ(cpl2->report_.GetNumTotalCandidates(), 17 ) << "FAIL";
  EXPECT_EQ(cpl2->report_.GetNumBallots(), 100 ) << "FAIL: CPLReadFileTest:ReadFile - NumBallots is incorrect";
  EXPECT_EQ(cpl2->report_.GetNumTotalSeats(), 10 ) << "FAIL";
  EXPECT_EQ(cpl2->report_.GetNumTotalSeats(), 10 ) << "FAIL";

  EXPECT_EQ(cpl2->report_.GetWinnerParty().size(), 4 ) << "FAIL";
  EXPECT_EQ(cpl2->report_.GetWinnerParty()[0].GetBallotList().size(), 28 ) << "FAIL";
  EXPECT_EQ(cpl2->report_.GetWinnerParty()[1].GetBallotList().size(), 26 ) << "FAIL";
  EXPECT_EQ(cpl2->report_.GetWinnerParty()[2].GetBallotList().size(), 26 ) << "FAIL";
  EXPECT_EQ(cpl2->report_.GetWinnerParty()[3].GetBallotList().size(), 20 ) << "FAIL";

  EXPECT_EQ(cpl2->report_.GetWinnerParty()[0].list_candidates_.size(), 3 ) << "FAIL";
  EXPECT_GE(cpl2->report_.GetWinnerParty()[1].list_candidates_.size(), 2 ) << "FAIL";
  EXPECT_GE(cpl2->report_.GetWinnerParty()[2].list_candidates_.size(), 2 ) << "FAIL";
  EXPECT_EQ(cpl2->report_.GetWinnerParty()[3].list_candidates_.size(), 2 ) << "FAIL";

  // Testing 2 parties' sum of winner candidates
  EXPECT_EQ(static_cast<int> (cpl2->report_.GetWinnerParty()[1].list_candidates_.size()
    + cpl2->report_.GetWinnerParty()[2].list_candidates_.size()), 5 ) << "FAIL";

  // Randomly choosing 1 party out of 2 for second distribution
  bool is_random = false;
  int count_first_audit = cpl2->report_.GetWinnerParty()[1].list_candidates_.size();
  for (int i = 0; i < 21; i ++) {
    cpl2->Audit();
    if (static_cast<int> (cpl2->report_.GetWinnerParty()[1].list_candidates_.size()) != count_first_audit)
      is_random = true;
  }
  EXPECT_EQ(is_random, true ) << "FAIL";
};

#endif  // CPL_AUDIT_TESTS
