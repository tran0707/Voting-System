/* STUDENTS:  DO NOT EDIT THIS FILE.  INSTEAD, MODIFY YOUR OWN PROJECT
 * CODE TO FIT THE SPECIFICATION GIVEN BY THE TESTS IN THIS FILE.
 *
 * If you DO modify it, we overwrite it with a fresh version from our repo
 * when grading, so you can't use it to fudge the tests anyway.
 *
 * This file is used by the CS5801 auto-grading system.
 *
 * Please note, the assessment tests for grading, will use the same include
 * files, class names, and function names for accessing students' code that you
 * find in this file.  So students, if you write your code so that it passes
 * these feedback tests, you can be assured that the auto-grader will at least
 * be able to properly link with your code.
 */
/*******************************************************************************
* This test file are inspired by CS5801 Fall 2019
******************************************************************************/
 #ifdef VOTING_TYPE_TESTS

/*******************************************************************************
 * Includes
 ******************************************************************************/
#include <cmath>
#include <gtest/gtest.h>
#include "src/voting_type.h"

class VotingTypeTest : public ::testing::Test {

 protected:
  virtual void SetUp() {
    // Initialize anything for TESTS
  }

  VotingType *voting_type = new VotingType();
};

/*******************************************************************************
 * Test Cases
 ******************************************************************************/

/*******************************************************************************
 * RandomSelectWinner - VS001
 * - Input: Random an array of 100 distinct number
 * - Testing: vector size = 100
 ******************************************************************************/
TEST_F(VotingTypeTest, RandomSelectWinner) {
  std::vector<int> rand_vec = voting_type->RandomSelectWinner(100);
  EXPECT_EQ(rand_vec.size(), 100 )
     << "FAIL: VotingType:RandomSelectWinner - RandomSelectWinner size is incorrect";
};

/************************************************************************
* SplitByComma
* - Testing: size and each element value of result
*************************************************************************/
TEST_F(VotingTypeTest, SplitByComma) {
  /*****************************************************************************
   * Case: split a string into 3 elements
   ****************************************************************************/
  std::vector<std::string> result = voting_type->SplitByComma("Mike,D,11");
  EXPECT_EQ(result.size(), 3) << "FAIL: VotingType:SplitByComma - result size is not correct";
  EXPECT_EQ(result[0], "Mike") << "FAIL: VotingType:SplitByComma - result 1st element value is not correct";
  EXPECT_EQ(result[1], "D") << "FAIL: VotingType:SplitByComma - result 2nd element value is not correct";
  EXPECT_EQ(result[2], "11") << "FAIL: VotingType:SplitByComma - result 3rd element value is not correct";
  /*****************************************************************************
   * Case: split a string "" into 1 element
   ****************************************************************************/
   std::vector<std::string> result1 = voting_type->SplitByComma("");
   EXPECT_EQ(result1.size(), 1) << "FAIL: VotingType:SplitByComma - result size is not correct";
   EXPECT_EQ(result1[0], "") << "FAIL: VotingType:SplitByComma - result 1st element value is not correct";
};

#endif  // voting_type_TESTS
