/* STUDENTS:  DO NOT EDIT THIS FILE.  INSTEAD, MODIFY YOUR OWN PROJECT
 * CODE TO FIT THE SPECIFICATION GIVEN BY THE TESTS IN THIS FILE.
 *
 * If you DO modify it, we overwrite it with a fresh version from our repo
 * when grading, so you can't use it to fudge the tests anyway.
 *
 * This file is used by the CS5801 auto-grading system.
 *
 * Please note, the assessment tests for grading, will use the same include
 * files, class names, and function names for accessing students' code that you
 * find in this file.  So students, if you write your code so that it passes
 * these feedback tests, you can be assured that the auto-grader will at least
 * be able to properly link with your code.
 */
/*******************************************************************************
* This test file are inspired by CS5801 Fall 2019
******************************************************************************/
 #ifdef VOTING_SYSTEM_TESTS

/*******************************************************************************
 * Includes
 ******************************************************************************/
#include <cmath>
#include <iostream>
#include <gtest/gtest.h>
#include <unistd.h>
#include <string>
#include <fstream>
#include <cstring>
#include <vector>
#include "src/voting_system.h"

class VotingSystemTest : public ::testing::Test {

 protected:
  virtual void SetUp() {
    // Initialize anything for TESTS
  }

  VotingSystem *voting_system =
    new VotingSystem();
  VotingSystem *voting_system1 =
    new VotingSystem();
  VotingSystem *voting_system2 =
    new VotingSystem();
  VotingSystem *voting_system3 =
    new VotingSystem();
  std::ifstream fin;
  std::ifstream fin1;
};

/*******************************************************************************
 * Test Cases
 ******************************************************************************/

/*******************************************************************************
 * InputFileName
 * - Input: Tester manually enter input from keyboard
 * - Testing: valid or invalid filename return
 ******************************************************************************/
// TEST_F(VotingSystemTest, InputFileName) {
//   std::cout << "TESTING INPUT FILE NAME" << std::endl;
//   /*****************************************************************************
//    * Case: user enter valid filename
//    ****************************************************************************/
//   std::cout << "-------------------------------------------------------------------------------" << std::endl;
//   std::cout << "Enter opl.csv" << std::endl;
//   bool result = voting_system->InputFileName();
//   EXPECT_EQ(result, true ) << "FAIL: VotingSystemControlle:InputFileName - Enter \"opl.csv\" is not correct";
//
//   /*****************************************************************************
//    * Case: user enter invalid filename, then reenter a valid filename
//    ****************************************************************************/
//   std::cout << "-------------------------------------------------------------------------------" << std::endl;
//   std::cout << "Enter \"hello\", then enter \"Y\" or \"y\", then enter opl.csv" << std::endl;
//   bool result1 = voting_system->InputFileName();
//   EXPECT_EQ(result1, true ) << "FAIL: VotingSystemControlle:InputFileName - Enter \"hello\" then enter \"Y\" or \"y\" is not correct";
//
//   /*****************************************************************************
//    * Case: user enter invalid filename, then don't want to reenter
//    ****************************************************************************/
//   std::cout << "-------------------------------------------------------------------------------" << std::endl;
//   std::cout << "Enter \"hello\" then enter \"N\"" << std::endl;
//   bool result2 = voting_system->InputFileName();
//   EXPECT_EQ(result2, false) << "FAIL: VotingSystemControlle:InputFileName - Enter \"hello\" then enter \"N\" is not correct";
// };
//

/************************************************************************
* RunAuditProcess
* - This is intergration testing
* - Testing: file exist after running the system
*************************************************************************/
TEST_F(VotingSystemTest, RunAuditProcess) {
  /*****************************************************************************
   * Case 1: Running OPL
   * 3. Tesing existing filesss
   * 4. Also, tester manually test the result printed out in the screen.
   ****************************************************************************/
  voting_system1->SetFileName("opl.csv");
  voting_system1->RunAuditProcess();

	fin.open("audit_result.txt");
  EXPECT_EQ(fin.fail(), 0) << "FAIL: VotingSystemTest:RunAuditProcess - Export Voting Files for OPL didn't create";
  fin.close();
	fin.clear();
  remove("audit_result.txt");

	fin1.open("sharing_result.txt");
  EXPECT_EQ(fin1.fail(), 0) <<"FAIL: VotingSystemTest:RunAuditProcess - Export Voting Files for OPL didn't create";
  fin1.close();
	fin1.clear();
  remove("sharing_result.txt");

  // /*****************************************************************************
  //  * Case 2: Running CPL
  //  * 3. Tesing existing files
  //  * 4. Also, tester manually test the result printed out in the screen.
  //  ****************************************************************************/
  voting_system1->SetFileName("cpl.csv");
  voting_system1->RunAuditProcess();
	fin.open("audit_result.txt");
  EXPECT_EQ(fin.fail(), 0) << "FAIL: VotingSystemTest:RunAuditProcess - Export Voting Files for CPL didn't create";
  fin.close();
	fin.clear();
  remove("audit_result.txt");

	fin1.open("sharing_result.txt");
  EXPECT_EQ(fin1.fail(), 0) <<"FAIL: VotingSystemTest:RunAuditProcess - Export Voting Files for CPL didn't create";
  fin1.close();
	fin1.clear();
  remove("sharing_result.txt");

  /*****************************************************************************
   * Case 1: Running OPL with Tiebreaking
   * 3. Tesing existing files
   * 4. Also, tester manually test the result printed out in the screen.
   ****************************************************************************/
  // voting_system1->SetFileName("opl.csv");
  // voting_system1->RunAuditProcess();
	// fin.open("audit_result.txt");
  // EXPECT_EQ(fin.fail(), 0) << "FAIL: VotingSystemTest:RunAuditProcess - Export Voting Files for OPL didn't create";
  // fin.close();
	// fin.clear();
  // remove("audit_result.txt");
  //
	// fin1.open("share_public_OPL_0.txt");
  // EXPECT_EQ(fin1.fail(), 0) <<"FAIL: VotingSystemTest:RunAuditProcess - Export Voting Files for OPL didn't create";
  // fin1.close();
	// fin1.clear();
  // remove("share_public_OPL_0.txt");
};

#endif  // VOTING_SYSTEM_TESTS
