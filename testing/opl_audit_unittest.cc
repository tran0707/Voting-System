/* STUDENTS:  DO NOT EDIT THIS FILE.  INSTEAD, MODIFY YOUR OWN PROJECT
 * CODE TO FIT THE SPECIFICATION GIVEN BY THE TESTS IN THIS FILE.
 *
 * If you DO modify it, we overwrite it with a fresh version from our repo
 * when grading, so you can't use it to fudge the tests anyway.
 *
 * This file is used by the CS5801 auto-grading system.
 *
 * Please note, the assessment tests for grading, will use the same include
 * files, class names, and function names for accessing students' code that you
 * find in this file.  So students, if you write your code so that it passes
 * these feedback tests, you can be assured that the auto-grader will at least
 * be able to properly link with your code.
 */
/*******************************************************************************
* This test file are inspired by CS5801 Fall 2019
******************************************************************************/
 #ifdef OPL_AUDIT_TESTS

/*******************************************************************************
 * Includes
 ******************************************************************************/
#include <cmath>
#include <gtest/gtest.h>
#include "src/opl.h"
#include <string>
#include <unistd.h>
using namespace std;
class OPLAuditTest : public ::testing::Test {

 protected:
  virtual void SetUp() {
    // Initialize anything for TESTS
    opl->ReadFile("opl.csv");
    opl1->ReadFile("opl_regular_2.csv");
    opl2->ReadFile("opl_random_1.csv");
  }

  OPL *opl = new OPL();
  OPL *opl1 = new OPL();
  OPL *opl2 = new OPL();
};

/*******************************************************************************
 * Test Cases
 ******************************************************************************/

TEST_F(OPLAuditTest, AuditOPLFile) {
  opl->Audit();
  EXPECT_EQ(opl->report_.GetNumTotalCandidates(), 7 ) << "FAIL: oplReadFileTest:ReadFile - TotalCandidates is incorrect";
  EXPECT_EQ(opl->report_.GetNumBallots(), 100 ) << "FAIL: oplReadFileTest:ReadFile - NumBallots is incorrect";
  EXPECT_EQ(opl->report_.GetNumTotalSeats(), 5 ) << "FAIL: oplReadFileTest:ReadFile - TotalSeats is incorrect";

  EXPECT_EQ(opl->report_.GetWinnerParty().size(), 2 ) << "FAIL: GetWinnerParty";
  EXPECT_EQ(opl->report_.GetWinnerParty()[0].list_candidates_.size(), 3 ) << "FAIL";
  EXPECT_EQ(opl->report_.GetWinnerParty()[1].list_candidates_.size(), 2 ) << "FAIL";

  opl1->Audit();
  EXPECT_EQ(opl1->report_.GetNumTotalCandidates(), 7 ) << "FAIL";
  EXPECT_EQ(opl1->report_.GetNumBallots(), 100 ) << "FAIL";
  EXPECT_EQ(opl1->report_.GetNumTotalSeats(), 5 ) << "FAIL";

  EXPECT_EQ(opl1->report_.GetWinnerParty().size(), 3 ) << "FAIL";
  EXPECT_EQ(opl1->report_.GetWinnerParty()[0].list_candidates_.size(), 2 ) << "FAIL";
  EXPECT_EQ(opl1->report_.GetWinnerParty()[1].list_candidates_.size(), 2 ) << "FAIL";
  EXPECT_EQ(opl1->report_.GetWinnerParty()[2].list_candidates_.size(), 1 ) << "FAIL";


  opl2->Audit();
  EXPECT_EQ(opl2->report_.GetNumTotalCandidates(), 7 ) << "FAIL";
  EXPECT_EQ(opl2->report_.GetNumBallots(), 100 ) << "FAIL";
  EXPECT_EQ(opl2->report_.GetNumTotalSeats(), 5 ) << "FAIL";

  EXPECT_GE(opl2->report_.GetWinnerParty().size(), 2 ) << "FAIL:";
  EXPECT_GE(opl2->report_.GetWinnerParty()[0].list_candidates_.size(), 2 ) << "FAIL";
  EXPECT_EQ(opl2->report_.GetWinnerParty()[1].list_candidates_.size(), 2 ) << "FAIL";

  bool is_random_party = false;
  int count_list_winner_size = opl2->report_.GetWinnerParty().size();
  for (int i = 0; i < 13; i ++) {
    opl2->Audit();
    if (opl2->report_.GetWinnerParty().size() != (unsigned)count_list_winner_size)
      is_random_party = true;
  }
  EXPECT_EQ(is_random_party, true ) << "FAIL";

  bool is_random_candidate = false;
  std::string candidate_name = opl2->report_.GetWinnerParty()[1].list_candidates_[1].GetName();
  for (int i = 0; i < 21; i ++) {
    opl2->Audit();
    if (opl2->report_.GetWinnerParty()[1].list_candidates_[1].GetName().compare(candidate_name) != 0)
      is_random_candidate = true;
  }
  EXPECT_EQ(is_random_candidate, true ) << "FAIL";

  
};

#endif  // OPL_AUDIT_TESTS
